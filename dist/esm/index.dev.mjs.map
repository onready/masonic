{"version":3,"file":"index.dev.mjs","sources":["../../src/use-scroller.ts","../../src/elements-cache.ts","../../src/use-force-update.ts","../../src/use-masonry.tsx","../../src/masonry-scroller.tsx","../../src/use-container-position.ts","../../src/use-resize-observer.ts","../../src/interval-tree.ts","../../src/use-positioner.ts","../../src/use-scroll-to-index.ts","../../src/masonry.tsx","../../src/list.tsx","../../src/use-infinite-loader.ts"],"sourcesContent":["import * as React from 'react'\r\nimport useScrollPosition from '@react-hook/window-scroll'\r\nimport {requestTimeout, clearRequestTimeout} from '@essentials/request-timeout'\r\n\r\n/**\r\n * A hook for tracking whether the `window` is currently being scrolled and it's scroll position on\r\n * the y-axis. These values are used for determining which grid cells to render and when\r\n * to add styles to the masonry container that maximize scroll performance.\r\n *\r\n * @param offset The vertical space in pixels between the top of the grid container and the top\r\n *  of the browser `document.documentElement`.\r\n * @param fps This determines how often (in frames per second) to update the scroll position of the\r\n *  browser `window` in state, and as a result the rate the masonry grid recalculates its visible cells.\r\n *  The default value of `12` has been very reasonable in my own testing, but if you have particularly\r\n *  heavy `render` components it may be prudent to reduce this number.\r\n */\r\nexport function useScroller(\r\n  offset = 0,\r\n  fps = 12\r\n): {scrollTop: number; isScrolling: boolean} {\r\n  const scrollTop = useScrollPosition(fps)\r\n  const [isScrolling, setIsScrolling] = React.useState(false)\r\n  const didMount = React.useRef(0)\r\n\r\n  React.useEffect(() => {\r\n    if (didMount.current === 1) setIsScrolling(true)\r\n    const to = requestTimeout(() => {\r\n      // This is here to prevent premature bail outs while maintaining high resolution\r\n      // unsets. Without it there will always bee a lot of unnecessary DOM writes to style.\r\n      setIsScrolling(false)\r\n    }, 40 + 1000 / fps)\r\n    didMount.current = 1\r\n    return () => clearRequestTimeout(to)\r\n  }, [fps, scrollTop])\r\n\r\n  return {scrollTop: Math.max(0, scrollTop - offset), isScrolling}\r\n}\r\n","export const elementsCache: WeakMap<Element, number> = new Map()\r\n","import * as React from 'react'\r\n\r\nexport function useForceUpdate() {\r\n  const setState = React.useState(emptyObj)[1]\r\n  return React.useRef(() => setState({})).current\r\n}\r\n\r\nconst emptyObj = {}\r\n","import * as React from 'react'\r\nimport trieMemoize from 'trie-memoize'\r\nimport OneKeyMap from '@essentials/one-key-map'\r\nimport memoizeOne from '@essentials/memoize-one'\r\nimport useLatest from '@react-hook/latest'\r\nimport {elementsCache} from './elements-cache'\r\nimport {useForceUpdate} from './use-force-update'\r\nimport type {Positioner} from './use-positioner'\r\n\r\n/**\r\n * This hook handles the render phases of the masonry layout and returns the grid as a React element.\r\n *\r\n * @param options Options for configuring the masonry layout renderer. See `UseMasonryOptions`.\r\n */\r\nexport function useMasonry<Item>({\r\n  // Measurement and layout\r\n  positioner,\r\n  resizeObserver,\r\n  // Grid items\r\n  items,\r\n  // Container props\r\n  as: ContainerComponent = 'div',\r\n  id,\r\n  className,\r\n  style,\r\n  role = 'grid',\r\n  tabIndex = 0,\r\n  containerRef,\r\n  // Item props\r\n  itemAs: ItemComponent = 'div',\r\n  itemStyle,\r\n  itemHeightEstimate = 300,\r\n  itemKey = defaultGetItemKey,\r\n  // Rendering props\r\n  overscanBy = 2,\r\n  scrollTop,\r\n  isScrolling,\r\n  height,\r\n  render: RenderComponent,\r\n  onRender,\r\n}: UseMasonryOptions<Item>) {\r\n  let startIndex = 0\r\n  let stopIndex: number | undefined = void 0\r\n  const forceUpdate = useForceUpdate()\r\n  const setItemRef = getRefSetter(positioner, resizeObserver)\r\n  const itemCount = items.length\r\n  const {\r\n    columnWidth,\r\n    columnCount,\r\n    range,\r\n    estimateHeight,\r\n    size,\r\n    shortestColumn,\r\n  } = positioner\r\n  const measuredCount = size()\r\n  const shortestColumnSize = shortestColumn()\r\n  const children: React.ReactElement[] = []\r\n  const itemRole = role + 'item'\r\n  const storedOnRender = useLatest(onRender)\r\n\r\n  overscanBy = height * overscanBy\r\n  const rangeEnd = scrollTop + overscanBy\r\n  const needsFreshBatch =\r\n    shortestColumnSize < rangeEnd && measuredCount < itemCount\r\n\r\n  range(\r\n    // We overscan in both directions because users scroll both ways,\r\n    // though one must admit scrolling down is more common and thus\r\n    // we only overscan by half the downward overscan amount\r\n    Math.max(0, scrollTop - overscanBy / 2),\r\n    rangeEnd,\r\n    (index, left, top) => {\r\n      const data = items[index]\r\n      const key = itemKey(data, index)\r\n      const phaseTwoStyle: React.CSSProperties = {\r\n        top,\r\n        left,\r\n        width: columnWidth,\r\n        writingMode: 'horizontal-tb',\r\n        position: 'absolute',\r\n      }\r\n\r\n      /* istanbul ignore next */\r\n      if (\r\n        typeof process !== 'undefined' &&\r\n        process.env.NODE_ENV !== 'production'\r\n      ) {\r\n        throwWithoutData(data, index)\r\n      }\r\n\r\n      children.push(\r\n        <ItemComponent\r\n          key={key}\r\n          ref={setItemRef(index)}\r\n          role={itemRole}\r\n          style={\r\n            typeof itemStyle === 'object' && itemStyle !== null\r\n              ? Object.assign({}, phaseTwoStyle, itemStyle)\r\n              : phaseTwoStyle\r\n          }\r\n        >\r\n          {createRenderElement(RenderComponent, index, data, columnWidth)}\r\n        </ItemComponent>\r\n      )\r\n\r\n      if (stopIndex === void 0) {\r\n        startIndex = index\r\n        stopIndex = index\r\n      } else {\r\n        startIndex = Math.min(startIndex, index)\r\n        stopIndex = Math.max(stopIndex, index)\r\n      }\r\n    }\r\n  )\r\n\r\n  if (needsFreshBatch) {\r\n    const batchSize = Math.min(\r\n      itemCount - measuredCount,\r\n      Math.ceil(\r\n        ((scrollTop + overscanBy - shortestColumnSize) / itemHeightEstimate) *\r\n          columnCount\r\n      )\r\n    )\r\n\r\n    let index = measuredCount\r\n    const phaseOneStyle = getCachedSize(columnWidth)\r\n\r\n    for (; index < measuredCount + batchSize; index++) {\r\n      const data = items[index]\r\n      const key = itemKey(data, index)\r\n\r\n      /* istanbul ignore next */\r\n      if (\r\n        typeof process !== 'undefined' &&\r\n        process.env.NODE_ENV !== 'production'\r\n      ) {\r\n        throwWithoutData(data, index)\r\n      }\r\n\r\n      children.push(\r\n        <ItemComponent\r\n          key={key}\r\n          ref={setItemRef(index)}\r\n          role={itemRole}\r\n          style={\r\n            typeof itemStyle === 'object'\r\n              ? Object.assign({}, phaseOneStyle, itemStyle)\r\n              : phaseOneStyle\r\n          }\r\n        >\r\n          {createRenderElement(RenderComponent, index, data, columnWidth)}\r\n        </ItemComponent>\r\n      )\r\n    }\r\n  }\r\n\r\n  // Calls the onRender callback if the rendered indices changed\r\n  React.useEffect(() => {\r\n    if (typeof storedOnRender.current === 'function' && stopIndex !== void 0)\r\n      storedOnRender.current(startIndex, stopIndex, items)\r\n\r\n    didEverMount = '1'\r\n  }, [startIndex, stopIndex, items, storedOnRender])\r\n  // If we needed a fresh batch we should reload our components with the measured\r\n  // sizes\r\n  React.useEffect(() => {\r\n    if (needsFreshBatch) forceUpdate()\r\n    // eslint-disable-next-line\r\n  }, [needsFreshBatch])\r\n\r\n  // gets the container style object based upon the estimated height and whether or not\r\n  // the page is being scrolled\r\n  const containerStyle = getContainerStyle(\r\n    isScrolling,\r\n    estimateHeight(itemCount, itemHeightEstimate)\r\n  )\r\n\r\n  return (\r\n    <ContainerComponent\r\n      ref={containerRef}\r\n      key={didEverMount}\r\n      id={id}\r\n      role={role}\r\n      className={className}\r\n      tabIndex={tabIndex}\r\n      style={\r\n        typeof style === 'object'\r\n          ? assignUserStyle(containerStyle, style)\r\n          : containerStyle\r\n      }\r\n      children={children}\r\n    />\r\n  )\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction throwWithoutData(data: any, index: number) {\r\n  if (!data) {\r\n    throw new Error(\r\n      `No data was found at index: ${index}\\n\\n` +\r\n        `This usually happens when you've mutated or changed the \"items\" array in a ` +\r\n        `way that makes it shorter than the previous \"items\" array. Masonic knows nothing ` +\r\n        `about your underlying data and when it caches cell positions, it assumes you aren't ` +\r\n        `mutating the underlying \"items\".\\n\\n` +\r\n        `See https://codesandbox.io/s/masonic-w-react-router-example-2b5f9?file=/src/index.js for ` +\r\n        `an example that gets around this limitations. For advanced implementations, see ` +\r\n        `https://codesandbox.io/s/masonic-w-react-router-and-advanced-config-example-8em42?file=/src/index.js\\n\\n` +\r\n        `If this was the result of your removing an item from your \"items\", see this issue: ` +\r\n        `https://github.com/jaredLunde/masonic/issues/12`\r\n    )\r\n  }\r\n}\r\n\r\n// This is for triggering a remount after SSR has loaded in the client w/ hydrate()\r\nlet didEverMount = '0'\r\n\r\nexport interface UseMasonryOptions<Item> {\r\n  /**\r\n   * An array containing the data used by the grid items.\r\n   */\r\n  items: Item[]\r\n  /**\r\n   * A grid cell positioner and cache created by the `usePositioner()` hook or\r\n   * the `createPositioner` utility.\r\n   */\r\n  positioner: Positioner\r\n  /**\r\n   * A resize observer that tracks mutations to the grid cells and forces the\r\n   * Masonry grid to recalculate its layout if any cells affect column heights\r\n   * change. Check out the `useResizeObserver()` hook.\r\n   */\r\n  resizeObserver?: {\r\n    observe: ResizeObserver['observe']\r\n    disconnect: ResizeObserver['observe']\r\n    unobserve: ResizeObserver['unobserve']\r\n  }\r\n  /**\r\n   * This is the type of element the grid container will be rendered as.\r\n   * @default \"div\"`\r\n   */\r\n  as?: keyof JSX.IntrinsicElements | React.ComponentType<any>\r\n  /**\r\n   * Optionally gives the grid container an `id` prop.\r\n   */\r\n  id?: string\r\n  /**\r\n   * Optionally gives the grid container a `className` prop.\r\n   */\r\n  className?: string\r\n  /**\r\n   * Adds extra `style` attributes to the container in addition to those\r\n   * created by the `useMasonry()` hook.\r\n   */\r\n  style?: React.CSSProperties\r\n  /**\r\n   * Optionally swap out the accessibility `role` prop of the container and its items.\r\n   * @default \"grid\"\r\n   */\r\n  role?: 'grid' | 'list'\r\n  /**\r\n   * Change the `tabIndex` of the grid container.\r\n   * @default 0\r\n   */\r\n  tabIndex?: number\r\n  /**\r\n   * Forwards a React ref to the grid container.\r\n   */\r\n  containerRef?:\r\n    | ((element: HTMLElement) => void)\r\n    | React.MutableRefObject<HTMLElement | null>\r\n  /**\r\n   * This is the type of element the grid items will be rendered as.\r\n   * @default \"div\"\r\n   */\r\n  itemAs?: keyof JSX.IntrinsicElements | React.ComponentType<any>\r\n  /**\r\n   * Adds extra `style` attributes to the grid items in addition to those\r\n   * created by the `useMasonry()` hook.\r\n   */\r\n  itemStyle?: React.CSSProperties\r\n  /**\r\n   * This value is used for estimating the initial height of the masonry grid. It is important for\r\n   * the UX of the scrolling behavior and in determining how many `items` to render in a batch, so it's\r\n   * wise to set this value with some level accuracy, though it doesn't need to be perfect.\r\n   * @default 300\r\n   */\r\n  itemHeightEstimate?: number\r\n  /**\r\n   * The value returned here must be unique to the item. By default, the key is the item's index. This is ok\r\n   * if your collection of items is never modified. Setting this property ensures that the component in `render`\r\n   * is reused each time the masonry grid is reflowed. A common pattern would be to return the item's database\r\n   * ID here if there is one, e.g. `data => data.id`\r\n   * @default (data, index) => index`\r\n   */\r\n  itemKey?: (data: Item, index: number) => string | number\r\n  /**\r\n   * This number is used for determining the number of grid cells outside of the visible window to render.\r\n   * The default value is `2` which means \"render 2 windows worth (2 * `height`) of content before and after\r\n   * the items in the visible window\". A value of `3` would be 3 windows worth of grid cells, so it's a\r\n   * linear relationship.\r\n   *\r\n   * Overscanning is important for preventing tearing when scrolling through items in the grid, but setting\r\n   * too high of a vaimport { useForceUpdate } from './use-force-update';\r\nlue may create too much work for React to handle, so it's best that you tune this\r\n   * value accordingly.\r\n   * @default 2\r\n   */\r\n  overscanBy?: number\r\n\r\n  /**\r\n   * This is the height of the window. If you're rendering the grid relative to the browser `window`,\r\n   * the current `document.documentElement.clientHeight` is the value you'll want to set here. If you're\r\n   * rendering the grid inside of another HTML element, you'll want to provide the current `element.offsetHeight`\r\n   * here.\r\n   */\r\n  height: number\r\n  /**\r\n   * The current scroll progress in pixel of the window the grid is rendered in. If you're rendering\r\n   * the grid relative to the browser `window`, you'll want the most current `window.scrollY` here.\r\n   * If you're rendering the grid inside of another HTML element, you'll want the current `element.scrollTop`\r\n   * value here. The `useScroller()` hook and `<MasonryScroller>` components will help you if you're\r\n   * rendering the grid relative to the browser `window`.\r\n   */\r\n  scrollTop: number\r\n  /**\r\n   * This property is used for determining whether or not the grid container should add styles that\r\n   * dramatically increase scroll performance. That is, turning off `pointer-events` and adding a\r\n   * `will-change: contents;` value to the style string. You can forgo using this prop, but I would\r\n   * not recommend that. The `useScroller()` hook and `<MasonryScroller>` components will help you if\r\n   * you're rendering the grid relative to the browser `window`.\r\n   * @default false\r\n   */\r\n  isScrolling?: boolean\r\n  /**\r\n   * This component is rendered for each item of your `items` prop array. It should accept three props:\r\n   * `index`, `width`, and `data`. See RenderComponentProps.\r\n   */\r\n  render: React.ComponentType<RenderComponentProps<Item>>\r\n  /**\r\n   * This callback is invoked any time the items currently being rendered by the grid change.\r\n   */\r\n  onRender?: (\r\n    startIndex: number,\r\n    stopIndex: number | undefined,\r\n    items: Item[]\r\n  ) => void\r\n}\r\n\r\nexport interface RenderComponentProps<Item> {\r\n  /**\r\n   * The index of the cell in the `items` prop array.\r\n   */\r\n  index: number\r\n  /**\r\n   * The rendered width of the cell's column.\r\n   */\r\n  width: number\r\n  /**\r\n   * The data at `items[index]` of your `items` prop array.\r\n   */\r\n  data: Item\r\n}\r\n\r\n//\r\n// Render-phase utilities\r\n\r\n// ~5.5x faster than createElement without the memo\r\nconst createRenderElement = trieMemoize(\r\n  [OneKeyMap, {}, WeakMap, OneKeyMap],\r\n  (RenderComponent, index, data, columnWidth) => (\r\n    <RenderComponent index={index} data={data} width={columnWidth} />\r\n  )\r\n)\r\n\r\nconst getContainerStyle = memoizeOne(\r\n  (isScrolling: boolean | undefined, estimateHeight: number) => ({\r\n    position: 'relative',\r\n    width: '100%',\r\n    maxWidth: '100%',\r\n    height: Math.ceil(estimateHeight),\r\n    maxHeight: Math.ceil(estimateHeight),\r\n    willChange: isScrolling ? 'contents' : void 0,\r\n    pointerEvents: isScrolling ? 'none' : void 0,\r\n  })\r\n)\r\n\r\nconst cmp2 = (args: IArguments, pargs: IArguments | any[]): boolean =>\r\n  args[0] === pargs[0] && args[1] === pargs[1]\r\n\r\nconst assignUserStyle = memoizeOne(\r\n  (containerStyle, userStyle) => Object.assign({}, containerStyle, userStyle),\r\n  // @ts-ignore\r\n  cmp2\r\n)\r\n\r\nfunction defaultGetItemKey<Item>(_: Item, i: number) {\r\n  return i\r\n}\r\n\r\n// the below memoizations for for ensuring shallow equal is reliable for pure\r\n// component children\r\nconst getCachedSize = memoizeOne(\r\n  (width: number): React.CSSProperties => ({\r\n    width,\r\n    zIndex: -1000,\r\n    visibility: 'hidden',\r\n    position: 'absolute',\r\n    writingMode: 'horizontal-tb',\r\n  }),\r\n  (args, pargs) => args[0] === pargs[0]\r\n)\r\n\r\nconst getRefSetter = memoizeOne(\r\n  (\r\n    positioner: Positioner,\r\n    resizeObserver?: UseMasonryOptions<any>['resizeObserver']\r\n  ) => (index: number) => (el: HTMLElement | null): void => {\r\n    if (el === null) return\r\n    if (resizeObserver) {\r\n      resizeObserver.observe(el)\r\n      elementsCache.set(el, index)\r\n    }\r\n    if (positioner.get(index) === void 0) positioner.set(index, el.offsetHeight)\r\n  },\r\n  // @ts-ignore\r\n  cmp2\r\n)\r\n","import {useScroller} from './use-scroller'\r\nimport {useMasonry} from './use-masonry'\r\nimport type {UseMasonryOptions} from './use-masonry'\r\n/**\r\n * A heavily-optimized component that updates `useMasonry()` when the scroll position of the browser `window`\r\n * changes. This bare-metal component is used by `<Masonry>` under the hood.\r\n */\r\nexport function MasonryScroller<Item>(props: MasonryScrollerProps<Item>) {\r\n  // We put this in its own layer because it's the thing that will trigger the most updates\r\n  // and we don't want to slower ourselves by cycling through all the functions, objects, and effects\r\n  // of other hooks\r\n  const {scrollTop, isScrolling} = useScroller(props.offset, props.scrollFps)\r\n  // This is an update-heavy phase and while we could just Object.assign here,\r\n  // it is way faster to inline and there's a relatively low hit to he bundle\r\n  // size.\r\n  return useMasonry<Item>({\r\n    scrollTop,\r\n    isScrolling,\r\n    positioner: props.positioner,\r\n    resizeObserver: props.resizeObserver,\r\n    items: props.items,\r\n    onRender: props.onRender,\r\n    as: props.as,\r\n    id: props.id,\r\n    className: props.className,\r\n    style: props.style,\r\n    role: props.role,\r\n    tabIndex: props.tabIndex,\r\n    containerRef: props.containerRef,\r\n    itemAs: props.itemAs,\r\n    itemStyle: props.itemStyle,\r\n    itemHeightEstimate: props.itemHeightEstimate,\r\n    itemKey: props.itemKey,\r\n    overscanBy: props.overscanBy,\r\n    height: props.height,\r\n    render: props.render,\r\n  })\r\n}\r\n\r\nexport interface MasonryScrollerProps<Item>\r\n  extends Omit<UseMasonryOptions<Item>, 'scrollTop' | 'isScrolling'> {\r\n  /**\r\n   * This determines how often (in frames per second) to update the scroll position of the\r\n   * browser `window` in state, and as a result the rate the masonry grid recalculates its visible cells.\r\n   * The default value of `12` has been very reasonable in my own testing, but if you have particularly\r\n   * heavy `render` components it may be prudent to reduce this number.\r\n   * @default 12\r\n   */\r\n  scrollFps?: number\r\n  /**\r\n   * The vertical space in pixels between the top of the grid container and the top\r\n   * of the browser `document.documentElement`.\r\n   * @default 0\r\n   */\r\n  offset?: number\r\n}\r\n\r\nif (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\r\n  MasonryScroller.displayName = 'MasonryScroller'\r\n}\r\n","import * as React from 'react'\r\nimport useLayoutEffect from '@react-hook/passive-layout-effect'\r\n\r\n/**\r\n * A hook for measuring the width of the grid container, as well as its distance\r\n * from the top of the document. These values are necessary to correctly calculate the number/width\r\n * of columns to render, as well as the number of rows to render.\r\n *\r\n * @param elementRef A `ref` object created by `React.useRef()`. That ref should be provided to the\r\n *   `containerRef` property in `useMasonry()`.\r\n * @param deps You can force this hook to recalculate the `offset` and `width` whenever this\r\n *   dependencies list changes. A common dependencies list might look like `[windowWidth, windowHeight]`,\r\n *   which would force the hook to recalculate any time the size of the browser `window` changed.\r\n */\r\nexport function useContainerPosition(\r\n  elementRef: React.MutableRefObject<HTMLElement | null>,\r\n  deps: React.DependencyList = emptyArr\r\n): ContainerPosition {\r\n  const [containerPosition, setContainerPosition] = React.useState<\r\n    ContainerPosition\r\n  >({offset: 0, width: 0})\r\n\r\n  useLayoutEffect(() => {\r\n    const {current} = elementRef\r\n    if (current !== null) {\r\n      let offset = 0\r\n      let el = current\r\n\r\n      do {\r\n        offset += el.offsetTop || 0\r\n        el = el.offsetParent as HTMLElement\r\n      } while (el)\r\n\r\n      if (\r\n        offset !== containerPosition.offset ||\r\n        current.offsetWidth !== containerPosition.width\r\n      ) {\r\n        setContainerPosition({\r\n          offset,\r\n          width: current.offsetWidth,\r\n        })\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, deps)\r\n\r\n  return containerPosition\r\n}\r\n\r\nexport interface ContainerPosition {\r\n  /**\r\n   * The distance in pixels between the top of the element in `elementRef` and the top of\r\n   * the `document.documentElement`.\r\n   */\r\n  offset: number\r\n  /**\r\n   * The `offsetWidth` of the element in `elementRef`.\r\n   */\r\n  width: number\r\n}\r\n\r\nconst emptyArr: [] = []\r\n","import * as React from 'react'\r\nimport trieMemoize from 'trie-memoize'\r\nimport ResizeObserver from 'resize-observer-polyfill'\r\nimport {elementsCache} from './elements-cache'\r\nimport {useForceUpdate} from './use-force-update'\r\nimport type {Positioner} from './use-positioner'\r\n\r\n/**\r\n * Creates a resize observer that forces updates to the grid cell positions when mutations are\r\n * made to cells affecting their height.\r\n *\r\n * @param positioner The masonry cell positioner created by the `usePositioner()` hook.\r\n */\r\nexport function useResizeObserver(positioner: Positioner) {\r\n  const forceUpdate = useForceUpdate()\r\n  const resizeObserver = createResizeObserver(positioner, forceUpdate)\r\n  // Cleans up the resize observers when they change or the\r\n  // component unmounts\r\n  React.useEffect(() => () => resizeObserver.disconnect(), [resizeObserver])\r\n  return resizeObserver\r\n}\r\n\r\n/**\r\n * Creates a resize observer that fires an `updater` callback whenever the height of\r\n * one or many cells change. The `useResizeObserver()` hook is using this under the hood.\r\n *\r\n * @param positioner A cell positioner created by the `usePositioner()` hook or the `createPositioner()` utility\r\n * @param updater A callback that fires whenever one or many cell heights change.\r\n */\r\nexport const createResizeObserver = trieMemoize(\r\n  [WeakMap],\r\n  // TODO: figure out a way to test this\r\n  /* istanbul ignore next */\r\n  (positioner: Positioner, updater: (updates: number[]) => void) =>\r\n    new ResizeObserver((entries) => {\r\n      const updates: number[] = []\r\n      let i = 0\r\n\r\n      for (; i < entries.length; i++) {\r\n        const entry = entries[i]\r\n        const height = (entry.target as HTMLElement).offsetHeight\r\n\r\n        if (height > 0) {\r\n          const index = elementsCache.get(entry.target)\r\n\r\n          if (index !== void 0) {\r\n            const position = positioner.get(index)\r\n\r\n            if (position !== void 0 && height !== position.height)\r\n              updates.push(index, height)\r\n          }\r\n        }\r\n      }\r\n\r\n      if (updates.length > 0) {\r\n        // Updates the size/positions of the cell with the resize\r\n        // observer updates\r\n        positioner.update(updates)\r\n        updater(updates)\r\n      }\r\n    })\r\n)\r\n\r\ninterface ResizeObserverEntryBoxSize {\r\n  blockSize: number\r\n  inlineSize: number\r\n}\r\n\r\ninterface NativeResizeObserverEntry extends ResizeObserverEntry {\r\n  borderBoxSize: ResizeObserverEntryBoxSize\r\n  contentBoxSize: ResizeObserverEntryBoxSize\r\n}\r\n","type Color = 0 | 1 | 2\r\nconst RED = 0\r\nconst BLACK = 1\r\nconst NIL = 2\r\n\r\nconst DELETE = 0\r\nconst KEEP = 1\r\n\r\ntype ListNode = {\r\n  index: number\r\n  high: number\r\n  next: ListNode | null\r\n}\r\n\r\ninterface TreeNode {\r\n  max: number\r\n  low: number\r\n  high: number\r\n  // color\r\n  C: Color\r\n  // P\r\n  P: TreeNode\r\n  // right\r\n  R: TreeNode\r\n  // left\r\n  L: TreeNode\r\n  list: ListNode\r\n}\r\n\r\ninterface Tree {\r\n  root: TreeNode\r\n  size: number\r\n}\r\n\r\nfunction addInterval(treeNode: TreeNode, high: number, index: number): boolean {\r\n  let node: ListNode | null = treeNode.list\r\n  let prevNode: ListNode | undefined\r\n\r\n  while (node) {\r\n    if (node.index === index) return false\r\n    if (high > node.high) break\r\n    prevNode = node\r\n    node = node.next\r\n  }\r\n\r\n  if (!prevNode) treeNode.list = {index, high, next: node}\r\n  if (prevNode) prevNode.next = {index, high, next: prevNode.next}\r\n\r\n  return true\r\n}\r\n\r\nfunction removeInterval(treeNode: TreeNode, index: number) {\r\n  let node: ListNode | null = treeNode.list\r\n  if (node.index === index) {\r\n    if (node.next === null) return DELETE\r\n    treeNode.list = node.next\r\n    return KEEP\r\n  }\r\n\r\n  let prevNode: ListNode | undefined = node\r\n  node = node.next\r\n\r\n  while (node !== null) {\r\n    if (node.index === index) {\r\n      prevNode.next = node.next\r\n      return KEEP\r\n    }\r\n    prevNode = node\r\n    node = node.next\r\n  }\r\n}\r\n\r\nconst NULL_NODE: TreeNode = {\r\n  low: 0,\r\n  max: 0,\r\n  high: 0,\r\n  C: NIL,\r\n  // @ts-ignore\r\n  P: undefined,\r\n  // @ts-ignore\r\n  R: undefined,\r\n  // @ts-ignore\r\n  L: undefined,\r\n  // @ts-ignore\r\n  list: undefined,\r\n}\r\n\r\nNULL_NODE.P = NULL_NODE\r\nNULL_NODE.L = NULL_NODE\r\nNULL_NODE.R = NULL_NODE\r\n\r\nfunction updateMax(node: TreeNode) {\r\n  const max = node.high\r\n  if (node.L === NULL_NODE && node.R === NULL_NODE) node.max = max\r\n  else if (node.L === NULL_NODE) node.max = Math.max(node.R.max, max)\r\n  else if (node.R === NULL_NODE) node.max = Math.max(node.L.max, max)\r\n  else node.max = Math.max(Math.max(node.L.max, node.R.max), max)\r\n}\r\n\r\nfunction updateMaxUp(node: TreeNode) {\r\n  let x = node\r\n\r\n  while (x.P !== NULL_NODE) {\r\n    updateMax(x.P)\r\n    x = x.P\r\n  }\r\n}\r\n\r\nfunction rotateLeft(tree: Tree, x: TreeNode) {\r\n  if (x.R === NULL_NODE) return\r\n  const y = x.R\r\n  x.R = y.L\r\n  if (y.L !== NULL_NODE) y.L.P = x\r\n  y.P = x.P\r\n\r\n  if (x.P === NULL_NODE) tree.root = y\r\n  else {\r\n    if (x === x.P.L) x.P.L = y\r\n    else x.P.R = y\r\n  }\r\n\r\n  y.L = x\r\n  x.P = y\r\n\r\n  updateMax(x)\r\n  updateMax(y)\r\n}\r\n\r\nfunction rotateRight(tree: Tree, x: TreeNode) {\r\n  if (x.L === NULL_NODE) return\r\n  const y = x.L\r\n  x.L = y.R\r\n  if (y.R !== NULL_NODE) y.R.P = x\r\n  y.P = x.P\r\n\r\n  if (x.P === NULL_NODE) tree.root = y\r\n  else {\r\n    if (x === x.P.R) x.P.R = y\r\n    else x.P.L = y\r\n  }\r\n\r\n  y.R = x\r\n  x.P = y\r\n\r\n  updateMax(x)\r\n  updateMax(y)\r\n}\r\n\r\nfunction replaceNode(tree: Tree, x: TreeNode, y: TreeNode) {\r\n  if (x.P === NULL_NODE) tree.root = y\r\n  else if (x === x.P.L) x.P.L = y\r\n  else x.P.R = y\r\n  y.P = x.P\r\n}\r\n\r\nfunction fixRemove(tree: Tree, x: TreeNode) {\r\n  let w\r\n\r\n  while (x !== NULL_NODE && x.C === BLACK) {\r\n    if (x === x.P.L) {\r\n      w = x.P.R\r\n\r\n      if (w.C === RED) {\r\n        w.C = BLACK\r\n        x.P.C = RED\r\n        rotateLeft(tree, x.P)\r\n        w = x.P.R\r\n      }\r\n\r\n      if (w.L.C === BLACK && w.R.C === BLACK) {\r\n        w.C = RED\r\n        x = x.P\r\n      } else {\r\n        if (w.R.C === BLACK) {\r\n          w.L.C = BLACK\r\n          w.C = RED\r\n          rotateRight(tree, w)\r\n          w = x.P.R\r\n        }\r\n\r\n        w.C = x.P.C\r\n        x.P.C = BLACK\r\n        w.R.C = BLACK\r\n        rotateLeft(tree, x.P)\r\n        x = tree.root\r\n      }\r\n    } else {\r\n      w = x.P.L\r\n\r\n      if (w.C === RED) {\r\n        w.C = BLACK\r\n        x.P.C = RED\r\n        rotateRight(tree, x.P)\r\n        w = x.P.L\r\n      }\r\n\r\n      if (w.R.C === BLACK && w.L.C === BLACK) {\r\n        w.C = RED\r\n        x = x.P\r\n      } else {\r\n        if (w.L.C === BLACK) {\r\n          w.R.C = BLACK\r\n          w.C = RED\r\n          rotateLeft(tree, w)\r\n          w = x.P.L\r\n        }\r\n\r\n        w.C = x.P.C\r\n        x.P.C = BLACK\r\n        w.L.C = BLACK\r\n        rotateRight(tree, x.P)\r\n        x = tree.root\r\n      }\r\n    }\r\n  }\r\n\r\n  x.C = BLACK\r\n}\r\n\r\nfunction minimumTree(x: TreeNode) {\r\n  while (x.L !== NULL_NODE) x = x.L\r\n  return x\r\n}\r\n\r\nfunction fixInsert(tree: Tree, z: TreeNode) {\r\n  let y: TreeNode\r\n  while (z.P.C === RED) {\r\n    if (z.P === z.P.P.L) {\r\n      y = z.P.P.R\r\n\r\n      if (y.C === RED) {\r\n        z.P.C = BLACK\r\n        y.C = BLACK\r\n        z.P.P.C = RED\r\n        z = z.P.P\r\n      } else {\r\n        if (z === z.P.R) {\r\n          z = z.P\r\n          rotateLeft(tree, z)\r\n        }\r\n\r\n        z.P.C = BLACK\r\n        z.P.P.C = RED\r\n        rotateRight(tree, z.P.P)\r\n      }\r\n    } else {\r\n      y = z.P.P.L\r\n\r\n      if (y.C === RED) {\r\n        z.P.C = BLACK\r\n        y.C = BLACK\r\n        z.P.P.C = RED\r\n        z = z.P.P\r\n      } else {\r\n        if (z === z.P.L) {\r\n          z = z.P\r\n          rotateRight(tree, z)\r\n        }\r\n\r\n        z.P.C = BLACK\r\n        z.P.P.C = RED\r\n        rotateLeft(tree, z.P.P)\r\n      }\r\n    }\r\n  }\r\n  tree.root.C = BLACK\r\n}\r\n\r\ninterface IIntervalTree {\r\n  insert(low: number, high: number, index: number): void\r\n  remove(index: number): void\r\n  search(\r\n    low: number,\r\n    high: number,\r\n    callback: (index: number, low: number) => any\r\n  ): void\r\n  size: number\r\n}\r\n\r\nexport function createIntervalTree(): IIntervalTree {\r\n  const tree = {\r\n    root: NULL_NODE,\r\n    size: 0,\r\n  }\r\n  // we know these indexes are a consistent, safe way to make look ups\r\n  // for our case so it's a solid O(1) alternative to\r\n  // the O(log n) searchNode() in typical interval trees\r\n  const indexMap: Record<number, TreeNode> = {}\r\n\r\n  return {\r\n    insert(low, high, index) {\r\n      let x: TreeNode = tree.root\r\n      let y: TreeNode = NULL_NODE\r\n\r\n      while (x !== NULL_NODE) {\r\n        y = x\r\n        if (low === y.low) break\r\n        if (low < x.low) x = x.L\r\n        else x = x.R\r\n      }\r\n\r\n      if (low === y.low && y !== NULL_NODE) {\r\n        if (!addInterval(y, high, index)) return\r\n        y.high = Math.max(y.high, high)\r\n        updateMax(y)\r\n        updateMaxUp(y)\r\n        indexMap[index] = y\r\n        tree.size++\r\n        return\r\n      }\r\n\r\n      const z: TreeNode = {\r\n        low,\r\n        high,\r\n        max: high,\r\n        C: RED,\r\n        P: y,\r\n        L: NULL_NODE,\r\n        R: NULL_NODE,\r\n        list: {index, high, next: null},\r\n      }\r\n\r\n      if (y === NULL_NODE) {\r\n        tree.root = z\r\n      } else {\r\n        if (z.low < y.low) y.L = z\r\n        else y.R = z\r\n        updateMaxUp(z)\r\n      }\r\n\r\n      fixInsert(tree, z)\r\n      indexMap[index] = z\r\n      tree.size++\r\n    },\r\n\r\n    remove(index) {\r\n      const z = indexMap[index]\r\n      if (z === void 0) return\r\n      delete indexMap[index]\r\n\r\n      const intervalResult = removeInterval(z, index)\r\n      if (intervalResult === void 0) return\r\n      if (intervalResult === KEEP) {\r\n        z.high = z.list.high\r\n        updateMax(z)\r\n        updateMaxUp(z)\r\n        tree.size--\r\n        return\r\n      }\r\n\r\n      let y = z\r\n      let originalYColor = y.C\r\n      let x: TreeNode\r\n\r\n      if (z.L === NULL_NODE) {\r\n        x = z.R\r\n        replaceNode(tree, z, z.R)\r\n      } else if (z.R === NULL_NODE) {\r\n        x = z.L\r\n        replaceNode(tree, z, z.L)\r\n      } else {\r\n        y = minimumTree(z.R)\r\n        originalYColor = y.C\r\n        x = y.R\r\n\r\n        if (y.P === z) {\r\n          x.P = y\r\n        } else {\r\n          replaceNode(tree, y, y.R)\r\n          y.R = z.R\r\n          y.R.P = y\r\n        }\r\n\r\n        replaceNode(tree, z, y)\r\n        y.L = z.L\r\n        y.L.P = y\r\n        y.C = z.C\r\n      }\r\n\r\n      updateMax(x)\r\n      updateMaxUp(x)\r\n\r\n      if (originalYColor === BLACK) fixRemove(tree, x)\r\n      tree.size--\r\n    },\r\n\r\n    search(low, high, callback) {\r\n      const stack = [tree.root]\r\n      while (stack.length !== 0) {\r\n        const node = stack.pop() as TreeNode\r\n        if (node === NULL_NODE || low > node.max) continue\r\n        if (node.L !== NULL_NODE) stack.push(node.L)\r\n        if (node.R !== NULL_NODE) stack.push(node.R)\r\n        if (node.low <= high && node.high >= low) {\r\n          let curr: ListNode | null = node.list\r\n          while (curr !== null) {\r\n            if (curr.high >= low) callback(curr.index, node.low)\r\n            curr = curr.next\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    get size() {\r\n      return tree.size\r\n    },\r\n  }\r\n}\r\n","import * as React from 'react'\r\nimport useLayoutEffect from '@react-hook/passive-layout-effect'\r\nimport {createIntervalTree} from './interval-tree'\r\n\r\n/**\r\n * This hook creates the grid cell positioner and cache required by `useMasonry()`. This is\r\n * the meat of the grid's layout algorithm, determining which cells to render at a given scroll\r\n * position, as well as where to place new items in the grid.\r\n *\r\n * @param options Properties that determine the number of columns in the grid, as well\r\n *  as their widths.\r\n * @param deps This hook will create a new positioner, clearing all existing cached positions,\r\n *  whenever the dependencies in this list change.\r\n */\r\nexport function usePositioner(\r\n  {\r\n    width,\r\n    columnWidth = 200,\r\n    columnGutter = 0,\r\n    columnCount,\r\n  }: UsePositionerOptions,\r\n  deps: React.DependencyList = emptyArr\r\n): Positioner {\r\n  const initPositioner = (): Positioner => {\r\n    const [computedColumnWidth, computedColumnCount] = getColumns(\r\n      width,\r\n      columnWidth,\r\n      columnGutter,\r\n      columnCount\r\n    )\r\n    return createPositioner(\r\n      computedColumnCount,\r\n      computedColumnWidth,\r\n      columnGutter\r\n    )\r\n  }\r\n  const [positioner, setPositioner] = React.useState<Positioner>(initPositioner)\r\n  const didMount = React.useRef(0)\r\n\r\n  // Create a new positioner when the dependencies change\r\n  useLayoutEffect(() => {\r\n    if (didMount.current) setPositioner(initPositioner())\r\n    didMount.current = 1\r\n    // eslint-disable-next-line\r\n  }, deps)\r\n\r\n  // Updates the item positions any time a prop potentially affecting their\r\n  // size changes\r\n  useLayoutEffect(() => {\r\n    if (didMount.current) {\r\n      const cacheSize = positioner.size()\r\n      const nextPositioner = initPositioner()\r\n      let index = 0\r\n\r\n      for (; index < cacheSize; index++) {\r\n        const pos = positioner.get(index)\r\n        nextPositioner.set(index, pos !== void 0 ? pos.height : 0)\r\n      }\r\n\r\n      setPositioner(nextPositioner)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [width, columnWidth, columnGutter, columnCount])\r\n\r\n  return positioner\r\n}\r\n\r\nexport interface UsePositionerOptions {\r\n  /**\r\n   * The width of the container you're rendering the grid within, i.e. the container\r\n   * element's `element.offsetWidth`\r\n   */\r\n  width: number\r\n  /**\r\n   * The minimum column width. The `usePositioner()` hook will automatically size the\r\n   * columns to fill their container based upon the `columnWidth` and `columnGutter` values.\r\n   * It will never render anything smaller than this width unless its container itself is\r\n   * smaller than its value. This property is optional if you're using a static `columnCount`.\r\n   * @default 200\r\n   */\r\n  columnWidth?: number\r\n  /**\r\n   * This sets the vertical and horizontal space between grid cells in pixels.\r\n   */\r\n  columnGutter?: number\r\n  /**\r\n   * By default, `usePositioner()` derives the column count from the `columnWidth`, `columnGutter`,\r\n   * and `width` props. However, in some situations it is nice to be able to override that behavior\r\n   * (e.g. creating a `List` component).\r\n   */\r\n  columnCount?: number\r\n}\r\n\r\n/**\r\n * Creates a cell positioner for the `useMasonry()` hook. The `usePositioner()` hook uses\r\n * this utility under the hood.\r\n *\r\n * @param columnCount The number of columns in the grid\r\n * @param columnWidth The width of each column in the grid\r\n * @param columnGutter The amount of horizontal and vertical space in pixels to render\r\n *  between each grid item.\r\n */\r\nexport const createPositioner = (\r\n  columnCount: number,\r\n  columnWidth: number,\r\n  columnGutter = 0\r\n): Positioner => {\r\n  // O(log(n)) lookup of cells to render for a given viewport size\r\n  // Store tops and bottoms of each cell for fast intersection lookup.\r\n  const intervalTree = createIntervalTree()\r\n  // Track the height of each column.\r\n  // Layout algorithm below always inserts into the shortest column.\r\n  const columnHeights: number[] = new Array(columnCount)\r\n  // Used for O(1) item access\r\n  const items: PositionerItem[] = []\r\n  // Tracks the item indexes within an individual column\r\n  const columnItems: number[][] = new Array(columnCount)\r\n\r\n  for (let i = 0; i < columnCount; i++) {\r\n    columnHeights[i] = 0\r\n    columnItems[i] = []\r\n  }\r\n\r\n  return {\r\n    columnCount,\r\n    columnWidth,\r\n    set: (index, height = 0) => {\r\n      let column = 0\r\n\r\n      // finds the shortest column and uses it\r\n      for (let i = 1; i < columnHeights.length; i++) {\r\n        if (columnHeights[i] < columnHeights[column]) column = i\r\n      }\r\n\r\n      const top = columnHeights[column] || 0\r\n      columnHeights[column] = top + height + columnGutter\r\n      columnItems[column].push(index)\r\n      items[index] = {\r\n        left: column * (columnWidth + columnGutter),\r\n        top,\r\n        height,\r\n        column,\r\n      }\r\n      intervalTree.insert(top, top + height, index)\r\n    },\r\n    get: (index) => items[index],\r\n    // This only updates items in the specific columns that have changed, on and after the\r\n    // specific items that have changed\r\n    update: (updates) => {\r\n      const columns: number[] = new Array(columnCount)\r\n      let i = 0,\r\n        j = 0\r\n\r\n      // determines which columns have items that changed, as well as the minimum index\r\n      // changed in that column, as all items after that index will have their positions\r\n      // affected by the change\r\n      for (; i < updates.length - 1; i++) {\r\n        const index = updates[i]\r\n        const item = items[index]\r\n        item.height = updates[++i]\r\n        intervalTree.remove(index)\r\n        intervalTree.insert(item.top, item.top + item.height, index)\r\n        columns[item.column] =\r\n          columns[item.column] === void 0\r\n            ? index\r\n            : Math.min(index, columns[item.column])\r\n      }\r\n\r\n      for (i = 0; i < columns.length; i++) {\r\n        // bails out if the column didn't change\r\n        if (columns[i] === void 0) continue\r\n        const itemsInColumn = columnItems[i]\r\n        // the index order is sorted with certainty so binary search is a great solution\r\n        // here as opposed to Array.indexOf()\r\n        const startIndex = binarySearch(itemsInColumn, columns[i])\r\n        const index = columnItems[i][startIndex]\r\n        const startItem = items[index]\r\n        columnHeights[i] = startItem.top + startItem.height + columnGutter\r\n\r\n        for (j = startIndex + 1; j < itemsInColumn.length; j++) {\r\n          const index = itemsInColumn[j]\r\n          const item = items[index]\r\n          item.top = columnHeights[i]\r\n          columnHeights[i] = item.top + item.height + columnGutter\r\n          intervalTree.remove(index)\r\n          intervalTree.insert(item.top, item.top + item.height, index)\r\n        }\r\n      }\r\n    },\r\n    // Render all cells visible within the viewport range defined.\r\n    range: (lo, hi, renderCallback) =>\r\n      intervalTree.search(lo, hi, (index, top) =>\r\n        renderCallback(index, items[index].left, top)\r\n      ),\r\n    estimateHeight: (itemCount, defaultItemHeight): number => {\r\n      const tallestColumn = Math.max(0, Math.max.apply(null, columnHeights))\r\n\r\n      return itemCount === intervalTree.size\r\n        ? tallestColumn\r\n        : tallestColumn +\r\n            Math.ceil((itemCount - intervalTree.size) / columnCount) *\r\n              defaultItemHeight\r\n    },\r\n    shortestColumn: () => {\r\n      if (columnHeights.length > 1) return Math.min.apply(null, columnHeights)\r\n      return columnHeights[0] || 0\r\n    },\r\n    size(): number {\r\n      return intervalTree.size\r\n    },\r\n  }\r\n}\r\n\r\nexport interface Positioner {\r\n  /**\r\n   * The number of columns in the grid\r\n   */\r\n  columnCount: number\r\n  /**\r\n   * The width of each column in the grid\r\n   */\r\n  columnWidth: number\r\n  /**\r\n   * Sets the position for the cell at `index` based upon the cell's height\r\n   */\r\n  set: (index: number, height: number) => void\r\n  /**\r\n   * Gets the `PositionerItem` for the cell at `index`\r\n   */\r\n  get: (index: number) => PositionerItem | undefined\r\n  /**\r\n   * Updates cells based on their indexes and heights\r\n   * positioner.update([index, height, index, height, index, height...])\r\n   */\r\n  update: (updates: number[]) => void\r\n  /**\r\n   * Searches the interval tree for grid cells with a `top` value in\r\n   * betwen `lo` and `hi` and invokes the callback for each item that\r\n   * is discovered\r\n   */\r\n  range: (\r\n    lo: number,\r\n    hi: number,\r\n    renderCallback: (index: number, left: number, top: number) => void\r\n  ) => void\r\n  /**\r\n   * Returns the number of grid cells in the cache\r\n   */\r\n\r\n  size: () => number\r\n  /**\r\n   * Estimates the total height of the grid\r\n   */\r\n\r\n  estimateHeight: (itemCount: number, defaultItemHeight: number) => number\r\n  /**\r\n   * Returns the height of the shortest column in the grid\r\n   */\r\n\r\n  shortestColumn: () => number\r\n}\r\n\r\nexport interface PositionerItem {\r\n  /**\r\n   * This is how far from the top edge of the grid container in pixels the\r\n   * item is placed\r\n   */\r\n  top: number\r\n  /**\r\n   * This is how far from the left edge of the grid container in pixels the\r\n   * item is placed\r\n   */\r\n  left: number\r\n  /**\r\n   * This is the height of the grid cell\r\n   */\r\n  height: number\r\n  /**\r\n   * This is the column number containing the grid cell\r\n   */\r\n  column: number\r\n}\r\n\r\n/* istanbul ignore next */\r\nconst binarySearch = (a: number[], y: number): number => {\r\n  let l = 0\r\n  let h = a.length - 1\r\n\r\n  while (l <= h) {\r\n    const m = (l + h) >>> 1\r\n    const x = a[m]\r\n    if (x === y) return m\r\n    else if (x <= y) l = m + 1\r\n    else h = m - 1\r\n  }\r\n\r\n  return -1\r\n}\r\n\r\nconst getColumns = (\r\n  width = 0,\r\n  minimumWidth = 0,\r\n  gutter = 8,\r\n  columnCount?: number\r\n): [number, number] => {\r\n  columnCount = columnCount || Math.floor(width / (minimumWidth + gutter)) || 1\r\n  const columnWidth = Math.floor(\r\n    (width - gutter * (columnCount - 1)) / columnCount\r\n  )\r\n  return [columnWidth, columnCount]\r\n}\r\n\r\nconst emptyArr: [] = []\r\n","import * as React from 'react'\r\nimport useLatest from '@react-hook/latest'\r\nimport useEvent from '@react-hook/event'\r\nimport {useThrottleCallback} from '@react-hook/throttle'\r\nimport type {Positioner, PositionerItem} from './use-positioner'\r\n\r\n/**\r\n * A hook that creates a callback for scrolling to a specific index in\r\n * the \"items\" array.\r\n *\r\n * @param positioner A positioner created by the `usePositioner()` hook\r\n * @param options Configuration options\r\n */\r\nexport function useScrollToIndex(\r\n  positioner: Positioner,\r\n  options: UseScrollToIndexOptions\r\n) {\r\n  const {\r\n    align = 'top',\r\n    element = typeof window !== 'undefined' && window,\r\n    offset = 0,\r\n    height = typeof window !== 'undefined' ? window.innerHeight : 0,\r\n  } = options\r\n  const latestOptions = useLatest({\r\n    positioner,\r\n    element,\r\n    align,\r\n    offset,\r\n    height,\r\n  } as const)\r\n  const getTarget = React.useRef(() => {\r\n    const latestElement = latestOptions.current.element\r\n    return latestElement && 'current' in latestElement\r\n      ? latestElement.current\r\n      : latestElement\r\n  }).current\r\n  const [state, dispatch] = React.useReducer(\r\n    (\r\n      state: {\r\n        position: PositionerItem | undefined\r\n        index: number | undefined\r\n        prevTop: number | undefined\r\n      },\r\n      action:\r\n        | {type: 'scrollToIndex'; value: number | undefined}\r\n        | {type: 'setPosition'; value: PositionerItem | undefined}\r\n        | {type: 'setPrevTop'; value: number | undefined}\r\n        | {type: 'reset'}\r\n    ) => {\r\n      const nextState = {\r\n        position: state.position,\r\n        index: state.index,\r\n        prevTop: state.prevTop,\r\n      }\r\n\r\n      /* istanbul ignore next */\r\n      if (action.type === 'scrollToIndex') {\r\n        return {\r\n          position: latestOptions.current.positioner.get(action.value ?? -1),\r\n          index: action.value,\r\n          prevTop: void 0,\r\n        }\r\n      } else if (action.type === 'setPosition') {\r\n        nextState.position = action.value\r\n      } else if (action.type === 'setPrevTop') {\r\n        nextState.prevTop = action.value\r\n      } else if (action.type === 'reset') {\r\n        return defaultState\r\n      }\r\n\r\n      return nextState\r\n    },\r\n    defaultState\r\n  )\r\n  const throttledDispatch = useThrottleCallback(dispatch, 15)\r\n\r\n  // If we find the position along the way we can immediately take off\r\n  // to the correct spot.\r\n  useEvent(getTarget() as Window, 'scroll', () => {\r\n    if (!state.position && state.index) {\r\n      const position = latestOptions.current.positioner.get(state.index)\r\n\r\n      if (position) {\r\n        dispatch({type: 'setPosition', value: position})\r\n      }\r\n    }\r\n  })\r\n\r\n  // If the top changes out from under us in the case of dynamic cells, we\r\n  // want to keep following it.\r\n  const currentTop =\r\n    state.index !== void 0 &&\r\n    latestOptions.current.positioner.get(state.index)?.top\r\n\r\n  React.useEffect(() => {\r\n    const target = getTarget()\r\n    if (!target) return\r\n    const {height, align, offset, positioner} = latestOptions.current\r\n\r\n    if (state.position) {\r\n      let scrollTop = state.position.top\r\n\r\n      if (align === 'bottom') {\r\n        scrollTop = scrollTop - height + state.position.height\r\n      } else if (align === 'center') {\r\n        scrollTop -= (height - state.position.height) / 2\r\n      }\r\n\r\n      target.scrollTo(0, Math.max(0, (scrollTop += offset)))\r\n      // Resets state after 400ms, an arbitrary time I determined to be\r\n      // still visually pleasing if there is a slow network reply in dynamic\r\n      // cells\r\n      let didUnsubscribe = false\r\n      const timeout = setTimeout(\r\n        () => !didUnsubscribe && dispatch({type: 'reset'}),\r\n        400\r\n      )\r\n      return () => {\r\n        didUnsubscribe = true\r\n        clearTimeout(timeout)\r\n      }\r\n    } else if (state.index !== void 0) {\r\n      // Estimates the top based upon the average height of current cells\r\n      let estimatedTop =\r\n        (positioner.shortestColumn() / positioner.size()) * state.index\r\n      if (state.prevTop)\r\n        estimatedTop = Math.max(estimatedTop, state.prevTop + height)\r\n      target.scrollTo(0, estimatedTop)\r\n      throttledDispatch({type: 'setPrevTop', value: estimatedTop})\r\n    }\r\n  }, [currentTop, state, latestOptions, getTarget, throttledDispatch])\r\n\r\n  return React.useRef((index: number) => {\r\n    dispatch({type: 'scrollToIndex', value: index})\r\n  }).current\r\n}\r\n\r\nconst defaultState = {\r\n  index: void 0,\r\n  position: void 0,\r\n  prevTop: void 0,\r\n} as const\r\n\r\nexport type UseScrollToIndexOptions = {\r\n  /**\r\n   * The window element or a React ref for the window element. That is,\r\n   * this is the grid container.\r\n   * @default window\r\n   */\r\n  element?: Window | HTMLElement | React.RefObject<HTMLElement> | null\r\n  /**\r\n   * Sets the vertical alignment of the cell within the grid container.\r\n   * @default \"top\"\r\n   */\r\n  align?: 'center' | 'top' | 'bottom'\r\n  /**\r\n   * The height of the grid.\r\n   * @default window.innerHeight\r\n   */\r\n  height?: number\r\n  /**\r\n   * The vertical space in pixels between the top of the grid container and the top\r\n   * of the window.\r\n   * @default 0\r\n   */\r\n  offset?: number\r\n}\r\n","import * as React from 'react'\r\nimport {useWindowSize} from '@react-hook/window-size'\r\nimport {MasonryScroller} from './masonry-scroller'\r\nimport type {MasonryScrollerProps} from './masonry-scroller'\r\nimport {useContainerPosition} from './use-container-position'\r\nimport {useResizeObserver} from './use-resize-observer'\r\nimport {usePositioner} from './use-positioner'\r\nimport type {UsePositionerOptions} from './use-positioner'\r\nimport {useScrollToIndex} from './use-scroll-to-index'\r\nimport type {UseScrollToIndexOptions} from './use-scroll-to-index'\r\n\r\n/**\r\n * A \"batteries included\" masonry grid which includes all of the implementation details below. This component is the\r\n * easiest way to get off and running in your app, before switching to more advanced implementations, if necessary.\r\n * It will change its column count to fit its container's width and will decide how many rows to render based upon\r\n * the height of the browser `window`.\r\n */\r\nexport function Masonry<Item>(props: MasonryProps<Item>) {\r\n  const containerRef = React.useRef<null | HTMLElement>(null)\r\n  const windowSize = useWindowSize({\r\n    initialWidth: props.ssrWidth,\r\n    initialHeight: props.ssrHeight,\r\n  })\r\n  const containerPos = useContainerPosition(containerRef, windowSize)\r\n  const nextProps = Object.assign(\r\n    {\r\n      offset: containerPos.offset,\r\n      width: containerPos.width || windowSize[0],\r\n      height: windowSize[1],\r\n      containerRef,\r\n    },\r\n    props\r\n  ) as any\r\n  nextProps.positioner = usePositioner(nextProps)\r\n  nextProps.resizeObserver = useResizeObserver(nextProps.positioner)\r\n  const scrollToIndex = useScrollToIndex(nextProps.positioner, {\r\n    height: nextProps.height,\r\n    offset: containerPos.offset,\r\n    align:\r\n      typeof props.scrollToIndex === 'object'\r\n        ? props.scrollToIndex.align\r\n        : void 0,\r\n  })\r\n  const index =\r\n    props.scrollToIndex &&\r\n    (typeof props.scrollToIndex === 'number'\r\n      ? props.scrollToIndex\r\n      : props.scrollToIndex.index)\r\n\r\n  React.useEffect(() => {\r\n    if (index !== void 0) scrollToIndex(index)\r\n  }, [index, scrollToIndex])\r\n\r\n  return React.createElement(MasonryScroller, nextProps)\r\n}\r\n\r\nexport interface MasonryProps<Item>\r\n  extends Omit<\r\n      MasonryScrollerProps<Item>,\r\n      'offset' | 'width' | 'height' | 'containerRef' | 'positioner'\r\n    >,\r\n    Pick<UsePositionerOptions, 'columnWidth' | 'columnGutter' | 'columnCount'> {\r\n  /**\r\n   * Scrolls to a given index within the grid. The grid will re-scroll\r\n   * any time the index changes.\r\n   */\r\n  scrollToIndex?:\r\n    | number\r\n    | {\r\n        index: number\r\n        align: UseScrollToIndexOptions['align']\r\n      }\r\n  /**\r\n   * This is the width that will be used for the browser `window` when rendering this component in SSR.\r\n   * This prop isn't relevant for client-side only apps.\r\n   */\r\n  ssrWidth?: number\r\n  /**\r\n   * This is the height that will be used for the browser `window` when rendering this component in SSR.\r\n   * This prop isn't relevant for client-side only apps.\r\n   */\r\n  ssrHeight?: number\r\n  /**\r\n   * This determines how often (in frames per second) to update the scroll position of the\r\n   * browser `window` in state, and as a result the rate the masonry grid recalculates its visible cells.\r\n   * The default value of `12` has been very reasonable in my own testing, but if you have particularly\r\n   * heavy `render` components it may be prudent to reduce this number.\r\n   * @default 12\r\n   */\r\n  scrollFps?: number\r\n}\r\n\r\nif (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\r\n  Masonry.displayName = 'Masonry'\r\n}\r\n","import * as React from 'react'\r\nimport {Masonry} from './masonry'\r\nimport type {MasonryProps} from './masonry'\r\n\r\n/**\r\n * This is just a single-column `<Masonry>` component with `rowGutter` prop instead of\r\n * a `columnGutter` prop.\r\n */\r\nexport function List<Item>(props: ListProps<Item>) {\r\n  return (\r\n    <Masonry<Item>\r\n      role='list'\r\n      columnGutter={props.rowGutter}\r\n      columnCount={1}\r\n      columnWidth={1}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport interface ListProps<Item>\r\n  extends Omit<\r\n    MasonryProps<Item>,\r\n    'columGutter' | 'columnCount' | 'columnWidth'\r\n  > {\r\n  /**\r\n   * The amount of vertical space in pixels to add between the list cells.\r\n   * @default 0\r\n   */\r\n  rowGutter?: number\r\n}\r\n\r\nif (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\r\n  List.displayName = 'List'\r\n}\r\n","import * as React from 'react'\r\nimport useLatest from '@react-hook/latest'\r\n\r\n/**\r\n * A utility hook for seamlessly adding infinite scroll behavior to the `useMasonry()` hook. This\r\n * hook invokes a callback each time the last rendered index surpasses the total number of items\r\n * in your items array or the number defined in the `totalItems` option.\r\n *\r\n * @param loadMoreItems This callback is invoked when more rows must be loaded. It will be used to\r\n *  determine when to refresh the list with the newly-loaded data. This callback may be called multiple\r\n *  times in reaction to a single scroll event, so it's important to memoize its arguments. If you're\r\n *  creating this callback inside of a functional component, make sure you wrap it in `React.useCallback()`,\r\n *  as well.\r\n * @param options\r\n */\r\nexport function useInfiniteLoader<Item, T extends LoadMoreItemsCallback<Item>>(\r\n  loadMoreItems: T,\r\n  options: UseInfiniteLoaderOptions<Item> = emptyObj\r\n): LoadMoreItemsCallback<Item> {\r\n  const {\r\n    isItemLoaded,\r\n    minimumBatchSize = 16,\r\n    threshold = 16,\r\n    totalItems = 9e9,\r\n  } = options\r\n  const storedLoadMoreItems = useLatest(loadMoreItems)\r\n  const storedIsItemLoaded = useLatest(isItemLoaded)\r\n\r\n  return React.useCallback(\r\n    (startIndex, stopIndex, items) => {\r\n      const unloadedRanges = scanForUnloadedRanges(\r\n        storedIsItemLoaded.current,\r\n        minimumBatchSize,\r\n        items,\r\n        totalItems,\r\n        Math.max(0, startIndex - threshold),\r\n        Math.min(totalItems - 1, (stopIndex || 0) + threshold)\r\n      )\r\n      // The user is responsible for memoizing their loadMoreItems() function\r\n      // because we don't want to make assumptions about how they want to deal\r\n      // with `items`\r\n      for (let i = 0; i < unloadedRanges.length - 1; ++i)\r\n        storedLoadMoreItems.current(\r\n          unloadedRanges[i],\r\n          unloadedRanges[++i],\r\n          items\r\n        )\r\n    },\r\n    [\r\n      totalItems,\r\n      minimumBatchSize,\r\n      threshold,\r\n      storedLoadMoreItems,\r\n      storedIsItemLoaded,\r\n    ]\r\n  )\r\n}\r\n\r\n/**\r\n * Returns all of the ranges within a larger range that contain unloaded rows.\r\n */\r\nfunction scanForUnloadedRanges<Item>(\r\n  isItemLoaded: UseInfiniteLoaderOptions<\r\n    Item\r\n  >['isItemLoaded'] = defaultIsItemLoaded,\r\n  minimumBatchSize: UseInfiniteLoaderOptions<Item>['minimumBatchSize'] = 16,\r\n  items: any[],\r\n  totalItems: UseInfiniteLoaderOptions<Item>['totalItems'] = 9e9,\r\n  startIndex: number,\r\n  stopIndex: number\r\n): number[] {\r\n  const unloadedRanges: number[] = []\r\n  let rangeStartIndex: number | undefined,\r\n    rangeStopIndex: number | undefined,\r\n    index = startIndex\r\n\r\n  /* istanbul ignore next */\r\n  for (; index <= stopIndex; index++) {\r\n    if (!isItemLoaded(index, items)) {\r\n      rangeStopIndex = index\r\n      if (rangeStartIndex === void 0) rangeStartIndex = index\r\n    } else if (rangeStartIndex !== void 0 && rangeStopIndex !== void 0) {\r\n      unloadedRanges.push(rangeStartIndex, rangeStopIndex)\r\n      rangeStartIndex = rangeStopIndex = void 0\r\n    }\r\n  }\r\n\r\n  // If :rangeStopIndex is not null it means we haven't run out of unloaded rows.\r\n  // Scan forward to try filling our :minimumBatchSize.\r\n  if (rangeStartIndex !== void 0 && rangeStopIndex !== void 0) {\r\n    const potentialStopIndex = Math.min(\r\n      Math.max(rangeStopIndex, rangeStartIndex + minimumBatchSize - 1),\r\n      totalItems - 1\r\n    )\r\n\r\n    /* istanbul ignore next */\r\n    for (index = rangeStopIndex + 1; index <= potentialStopIndex; index++) {\r\n      if (!isItemLoaded(index, items)) {\r\n        rangeStopIndex = index\r\n      } else {\r\n        break\r\n      }\r\n    }\r\n\r\n    unloadedRanges.push(rangeStartIndex, rangeStopIndex)\r\n  }\r\n\r\n  // Check to see if our first range ended prematurely.\r\n  // In this case we should scan backwards to try filling our :minimumBatchSize.\r\n  /* istanbul ignore next */\r\n  if (unloadedRanges.length) {\r\n    let firstUnloadedStart = unloadedRanges[0]\r\n    const firstUnloadedStop = unloadedRanges[1]\r\n\r\n    while (\r\n      firstUnloadedStop - firstUnloadedStart + 1 < minimumBatchSize &&\r\n      firstUnloadedStart > 0\r\n    ) {\r\n      const index = firstUnloadedStart - 1\r\n\r\n      if (!isItemLoaded(index, items)) {\r\n        unloadedRanges[0] = firstUnloadedStart = index\r\n      } else {\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  return unloadedRanges\r\n}\r\n\r\nconst defaultIsItemLoaded = <Item>(index: number, items: Item[]): boolean =>\r\n  items[index] !== void 0\r\n\r\nexport interface UseInfiniteLoaderOptions<Item> {\r\n  /**\r\n   *  A callback responsible for determining the loaded state of each item. Should return `true`\r\n   * if the item has already been loaded and `false` if not.\r\n   * @default (index: number, items: any[]) => boolean\r\n   */\r\n  isItemLoaded?: (index: number, items: Item[]) => boolean\r\n  /**\r\n   * The minimum number of new items to be loaded at a time.  This property can be used to\r\n   * batch requests and reduce HTTP requests.\r\n   * @default 16\r\n   */\r\n  minimumBatchSize?: number\r\n  /**\r\n   * The threshold at which to pre-fetch data. A threshold X means that new data should start\r\n   * loading when a user scrolls within X cells of the end of your `items` array.\r\n   * @default 16\r\n   */\r\n  threshold?: number\r\n  /**\r\n   * The total number of items you'll need to eventually load (if known). This can\r\n   * be arbitrarily high if not known.\r\n   * @default 9e9\r\n   */\r\n  totalItems?: number\r\n}\r\n\r\nexport type LoadMoreItemsCallback<Item> = (\r\n  startIndex: number,\r\n  stopIndex: number,\r\n  items: Item[]\r\n) => any\r\n\r\nconst emptyObj = {}\r\n"],"names":["useScroller","offset","fps","scrollTop","useScrollPosition","isScrolling","setIsScrolling","React","didMount","current","to","requestTimeout","clearRequestTimeout","Math","max","elementsCache","Map","useForceUpdate","setState","emptyObj","useMasonry","positioner","resizeObserver","items","as","ContainerComponent","id","className","style","role","tabIndex","containerRef","itemAs","ItemComponent","itemStyle","itemHeightEstimate","itemKey","defaultGetItemKey","overscanBy","height","render","RenderComponent","onRender","startIndex","stopIndex","forceUpdate","setItemRef","getRefSetter","itemCount","length","columnWidth","columnCount","range","estimateHeight","size","shortestColumn","measuredCount","shortestColumnSize","children","itemRole","storedOnRender","useLatest","rangeEnd","needsFreshBatch","index","left","top","data","key","phaseTwoStyle","width","writingMode","position","process","throwWithoutData","push","Object","assign","createRenderElement","min","batchSize","ceil","phaseOneStyle","getCachedSize","didEverMount","containerStyle","getContainerStyle","assignUserStyle","Error","trieMemoize","OneKeyMap","WeakMap","memoizeOne","maxWidth","maxHeight","willChange","pointerEvents","cmp2","args","pargs","userStyle","_","i","zIndex","visibility","el","observe","set","get","offsetHeight","MasonryScroller","props","scrollFps","displayName","useContainerPosition","elementRef","deps","emptyArr","containerPosition","setContainerPosition","useLayoutEffect","offsetTop","offsetParent","offsetWidth","useResizeObserver","createResizeObserver","disconnect","updater","ResizeObserver","entries","updates","entry","target","update","RED","BLACK","NIL","DELETE","KEEP","addInterval","treeNode","high","node","list","prevNode","next","removeInterval","NULL_NODE","low","C","P","undefined","R","L","updateMax","updateMaxUp","x","rotateLeft","tree","y","root","rotateRight","replaceNode","fixRemove","w","minimumTree","fixInsert","z","createIntervalTree","indexMap","insert","remove","intervalResult","originalYColor","search","callback","stack","pop","curr","usePositioner","columnGutter","initPositioner","computedColumnWidth","computedColumnCount","getColumns","createPositioner","setPositioner","cacheSize","nextPositioner","pos","intervalTree","columnHeights","Array","columnItems","column","columns","j","item","itemsInColumn","binarySearch","startItem","lo","hi","renderCallback","defaultItemHeight","tallestColumn","apply","a","l","h","m","minimumWidth","gutter","floor","useScrollToIndex","options","align","element","window","innerHeight","latestOptions","getTarget","latestElement","state","dispatch","action","nextState","prevTop","type","value","defaultState","throttledDispatch","useThrottleCallback","useEvent","currentTop","scrollTo","didUnsubscribe","timeout","setTimeout","clearTimeout","estimatedTop","Masonry","windowSize","useWindowSize","initialWidth","ssrWidth","initialHeight","ssrHeight","containerPos","nextProps","scrollToIndex","__reactCreateElement__","List","rowGutter","useInfiniteLoader","loadMoreItems","isItemLoaded","minimumBatchSize","threshold","totalItems","storedLoadMoreItems","storedIsItemLoaded","unloadedRanges","scanForUnloadedRanges","defaultIsItemLoaded","rangeStartIndex","rangeStopIndex","potentialStopIndex","firstUnloadedStart","firstUnloadedStop"],"mappings":"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"}